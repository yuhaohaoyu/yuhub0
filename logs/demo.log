padmin@jjvm006:~$ minikube start
* minikube v1.12.3 on Ubuntu 18.04
* Automatically selected the virtualbox driver
* Downloading VM boot image ...
    > minikube-v1.12.2.iso.sha256: 65 B / 65 B [-------------] 100.00% ? p/s 0s
    > minikube-v1.12.2.iso: 173.73 MiB / 173.73 MiB [] 100.00% 72.87 MiB p/s 3s
* Starting control plane node minikube in cluster minikube
* Downloading Kubernetes v1.18.3 preload ...
    > preloaded-images-k8s-v5-v1.18.3-docker-overlay2-amd64.tar.lz4: 510.91 MiB
* Creating virtualbox VM (CPUs=2, Memory=6000MB, Disk=20000MB) ...
* Preparing Kubernetes v1.18.3 on Docker 19.03.12 ...
* Verifying Kubernetes components...
* Enabled addons: default-storageclass, storage-provisioner
* Done! kubectl is now configured to use "minikube"


padmin@jjvm006:~/Kube$ kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /home/padmin/.minikube/ca.crt
    server: https://192.168.99.100:8443
  name: minikube
contexts:
- context:
    cluster: minikube
    user: minikube
  name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube
  user:
    client-certificate: /home/padmin/.minikube/profiles/minikube/client.crt
    client-key: /home/padmin/.minikube/profiles/minikube/client.key

padmin@jjvm006:~/Kube$ kubectl cluster-info
Kubernetes master is running at https://192.168.99.100:8443
KubeDNS is running at https://192.168.99.100:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
padmin@jjvm006:~/Kube$ 

{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/nodes",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube",
                "selfLink": "/api/v1/nodes/minikube",
                "uid": "a6807cbe-5497-4412-a51a-092b0aa780c0",
                "resourceVersion": "602",
                "creationTimestamp": "2020-08-27T16:06:46Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/os": "linux",
                    "kubernetes.io/arch": "amd64",
                    "kubernetes.io/hostname": "minikube",
                    "kubernetes.io/os": "linux",
                    "minikube.k8s.io/commit": "2243b4b97c131e3244c5f014faedca0d846599f5-dirty",
                    "minikube.k8s.io/name": "minikube",
                    "minikube.k8s.io/updated_at": "2020_08_27T16_06_50_0700",
                    "minikube.k8s.io/version": "v1.12.3",
                    "node-role.kubernetes.io/master": ""
                },
                "annotations": {
                    "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/dockershim.sock",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:49Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:kubeadm.alpha.kubernetes.io/cri-socket": {}
                                },
                                "f:labels": {
                                    "f:node-role.kubernetes.io/master": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubectl",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:51Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    "f:minikube.k8s.io/commit": {},
                                    "f:minikube.k8s.io/name": {},
                                    "f:minikube.k8s.io/updated_at": {},
                                    "f:minikube.k8s.io/version": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:58Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:node.alpha.kubernetes.io/ttl": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:12:11Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:volumes.kubernetes.io/controller-managed-attach-detach": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:beta.kubernetes.io/arch": {},
                                    "f:beta.kubernetes.io/os": {},
                                    "f:kubernetes.io/arch": {},
                                    "f:kubernetes.io/hostname": {},
                                    "f:kubernetes.io/os": {}
                                }
                            },
                            "f:status": {
                                "f:addresses": {
                                    ".": {},
                                    "k:{\"type\":\"Hostname\"}": {
                                        ".": {},
                                        "f:address": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"InternalIP\"}": {
                                        ".": {},
                                        "f:address": {},
                                        "f:type": {}
                                    }
                                },
                                "f:allocatable": {
                                    ".": {},
                                    "f:cpu": {},
                                    "f:ephemeral-storage": {},
                                    "f:hugepages-2Mi": {},
                                    "f:memory": {},
                                    "f:pods": {}
                                },
                                "f:capacity": {
                                    ".": {},
                                    "f:cpu": {},
                                    "f:ephemeral-storage": {},
                                    "f:hugepages-2Mi": {},
                                    "f:memory": {},
                                    "f:pods": {}
                                },
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"DiskPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"MemoryPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PIDPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:daemonEndpoints": {
                                    "f:kubeletEndpoint": {
                                        "f:Port": {}
                                    }
                                },
                                "f:images": {},
                                "f:nodeInfo": {
                                    "f:architecture": {},
                                    "f:bootID": {},
                                    "f:containerRuntimeVersion": {},
                                    "f:kernelVersion": {},
                                    "f:kubeProxyVersion": {},
                                    "f:kubeletVersion": {},
                                    "f:machineID": {},
                                    "f:operatingSystem": {},
                                    "f:osImage": {},
                                    "f:systemUUID": {}
                                }
                            }
                        }
                    }
                ]
            },
            "spec": {},
            "status": {
                "capacity": {
                    "cpu": "2",
                    "ephemeral-storage": "17784752Ki",
                    "hugepages-2Mi": "0",
                    "memory": "5952056Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "2",
                    "ephemeral-storage": "17784752Ki",
                    "hugepages-2Mi": "0",
                    "memory": "5952056Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-08-27T16:12:11Z",
                        "lastTransitionTime": "2020-08-27T16:06:39Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-08-27T16:12:11Z",
                        "lastTransitionTime": "2020-08-27T16:06:39Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-08-27T16:12:11Z",
                        "lastTransitionTime": "2020-08-27T16:06:39Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2020-08-27T16:12:11Z",
                        "lastTransitionTime": "2020-08-27T16:07:08Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "192.168.99.100"
                    },
                    {
                        "type": "Hostname",
                        "address": "minikube"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "3817301a24174304820f347eaf287b64",
                    "systemUUID": "fb2fc41f-2307-4815-85e1-2679e681c37d",
                    "bootID": "17526ebf-a24b-4e05-956a-60e223ab5183",
                    "kernelVersion": "4.19.114",
                    "osImage": "Buildroot 2019.02.11",
                    "containerRuntimeVersion": "docker://19.3.12",
                    "kubeletVersion": "v1.18.3",
                    "kubeProxyVersion": "v1.18.3",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "k8s.gcr.io/etcd@sha256:4afb99b4690b418ffc2ceb67e1a17376457e441c1f09ab55447f0aaf992fa646",
                            "k8s.gcr.io/etcd:3.4.3-0"
                        ],
                        "sizeBytes": 288426917
                    },
                    {
                        "names": [
                            "kubernetesui/dashboard@sha256:a705c04e83badb4fdb2b95eb6b126f3c2759677b2f953742f3b08a1fada07d9d",
                            "kubernetesui/dashboard:v2.0.1"
                        ],
                        "sizeBytes": 222771101
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-apiserver@sha256:e1c8ce568634f79f76b6e8168c929511ad841ea7692271caf6fd3779c3545c2d",
                            "k8s.gcr.io/kube-apiserver:v1.18.3"
                        ],
                        "sizeBytes": 172997403
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-controller-manager@sha256:d62a4f41625e1631a2683cbdf1c9c9bd27f0b9c5d8d8202990236fc0d5ef1703",
                            "k8s.gcr.io/kube-controller-manager:v1.18.3"
                        ],
                        "sizeBytes": 162388763
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-proxy@sha256:6a093c22e305039b7bd6c3f8eab8f202ad8238066ed210857b25524443aa8aff",
                            "k8s.gcr.io/kube-proxy:v1.18.3"
                        ],
                        "sizeBytes": 117090625
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-scheduler@sha256:5381cd9680bf5fb16a5c8ac60141eaab242c1c4960f1c32a21807efcca3e765b",
                            "k8s.gcr.io/kube-scheduler:v1.18.3"
                        ],
                        "sizeBytes": 95279899
                    },
                    {
                        "names": [
                            "k8s.gcr.io/coredns@sha256:2c8d61c46f484d881db43b34d13ca47a269336e576c81cf007ca740fa9ec0800",
                            "k8s.gcr.io/coredns:1.6.7"
                        ],
                        "sizeBytes": 43794147
                    },
                    {
                        "names": [
                            "kubernetesui/metrics-scraper@sha256:555981a24f184420f3be0c79d4efb6c948a85cfce84034f85a563f4151a81cbf",
                            "kubernetesui/metrics-scraper:v1.0.4"
                        ],
                        "sizeBytes": 36937728
                    },
                    {
                        "names": [
                            "gcr.io/k8s-minikube/storage-provisioner@sha256:a7b2848b673e6a0927a16f30445d8f1b66f1504a35def0efa35e3dcac56b713e",
                            "gcr.io/k8s-minikube/storage-provisioner:v2"
                        ],
                        "sizeBytes": 32219136
                    },
                    {
                        "names": [
                            "k8s.gcr.io/pause@sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814f",
                            "k8s.gcr.io/pause:3.2"
                        ],
                        "sizeBytes": 682696
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/events",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-66bff467f8-nfhgc.162f2bad5ef15b73",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-66bff467f8-nfhgc.162f2bad5ef15b73",
                "uid": "4c1c7468-18da-4ef4-87f7-9c4052eb472c",
                "resourceVersion": "381",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:08Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-66bff467f8-nfhgc",
                "uid": "1ab263f3-0499-4de1-a603-25f7d1b7c6fa",
                "apiVersion": "v1",
                "resourceVersion": "315"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had taint {node.kubernetes.io/not-ready: }, that the pod didn't tolerate.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-08-27T16:06:56Z",
            "lastTimestamp": "2020-08-27T16:07:08Z",
            "count": 4,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-66bff467f8-nfhgc.162f2bb214d379b5",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-66bff467f8-nfhgc.162f2bb214d379b5",
                "uid": "e247969e-fae7-4928-a83b-c4886d9e78e1",
                "resourceVersion": "384",
                "creationTimestamp": "2020-08-27T16:07:16Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:16Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-66bff467f8-nfhgc",
                "uid": "1ab263f3-0499-4de1-a603-25f7d1b7c6fa",
                "apiVersion": "v1",
                "resourceVersion": "322"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/coredns-66bff467f8-nfhgc to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-08-27T16:07:16Z",
            "lastTimestamp": "2020-08-27T16:07:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-66bff467f8-nfhgc.162f2bb2653ea475",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-66bff467f8-nfhgc.162f2bb2653ea475",
                "uid": "194a3907-13cf-4f0a-ab5e-040f4ad07923",
                "resourceVersion": "387",
                "creationTimestamp": "2020-08-27T16:07:17Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:17Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-66bff467f8-nfhgc",
                "uid": "1ab263f3-0499-4de1-a603-25f7d1b7c6fa",
                "apiVersion": "v1",
                "resourceVersion": "383",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/coredns:1.6.7\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:07:17Z",
            "lastTimestamp": "2020-08-27T16:07:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-66bff467f8-nfhgc.162f2bb26c646eca",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-66bff467f8-nfhgc.162f2bb26c646eca",
                "uid": "0db15a6a-3ffd-4e5b-b12d-cbb10386bbed",
                "resourceVersion": "388",
                "creationTimestamp": "2020-08-27T16:07:18Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:18Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-66bff467f8-nfhgc",
                "uid": "1ab263f3-0499-4de1-a603-25f7d1b7c6fa",
                "apiVersion": "v1",
                "resourceVersion": "383",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Created",
            "message": "Created container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:07:18Z",
            "lastTimestamp": "2020-08-27T16:07:18Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-66bff467f8-nfhgc.162f2bb280154484",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-66bff467f8-nfhgc.162f2bb280154484",
                "uid": "221fe3a6-80b3-466f-9f3b-5a61a52d8ee5",
                "resourceVersion": "390",
                "creationTimestamp": "2020-08-27T16:07:18Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:18Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-66bff467f8-nfhgc",
                "uid": "1ab263f3-0499-4de1-a603-25f7d1b7c6fa",
                "apiVersion": "v1",
                "resourceVersion": "383",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Started",
            "message": "Started container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:07:18Z",
            "lastTimestamp": "2020-08-27T16:07:18Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-66bff467f8.162f2bad5d12f0a8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-66bff467f8.162f2bad5d12f0a8",
                "uid": "03f9e76f-e23f-413f-9c44-dcec761706c8",
                "resourceVersion": "319",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "coredns-66bff467f8",
                "uid": "f066332a-5c77-4862-8ad5-fa744218224f",
                "apiVersion": "apps/v1",
                "resourceVersion": "307"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: coredns-66bff467f8-nfhgc",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-08-27T16:06:56Z",
            "lastTimestamp": "2020-08-27T16:06:56Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns.162f2bad599302bd",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns.162f2bad599302bd",
                "uid": "3a9f7078-82ef-491f-945a-c5a52ae095ee",
                "resourceVersion": "311",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "coredns",
                "uid": "b6b6c399-11d7-4313-92c9-2ca0265d1a2e",
                "apiVersion": "apps/v1",
                "resourceVersion": "245"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set coredns-66bff467f8 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-08-27T16:06:56Z",
            "lastTimestamp": "2020-08-27T16:06:56Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "k8s.io-minikube-hostpath.162f2bb5a2b78ca4",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/k8s.io-minikube-hostpath.162f2bb5a2b78ca4",
                "uid": "ab5efd2a-182b-4fef-b0c7-87cad955a7be",
                "resourceVersion": "406",
                "creationTimestamp": "2020-08-27T16:07:31Z",
                "managedFields": [
                    {
                        "manager": "storage-provisioner",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:31Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Endpoints",
                "namespace": "kube-system",
                "name": "k8s.io-minikube-hostpath",
                "uid": "485b66cd-91b6-41b4-8011-3d8c2f87f0f6",
                "apiVersion": "v1",
                "resourceVersion": "405"
            },
            "reason": "LeaderElection",
            "message": "minikube_63d482a4-2974-48e5-a7ce-3cc944950e49 became leader",
            "source": {
                "component": "k8s.io/minikube-hostpath_minikube_63d482a4-2974-48e5-a7ce-3cc944950e49"
            },
            "firstTimestamp": "2020-08-27T16:07:31Z",
            "lastTimestamp": "2020-08-27T16:07:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-jl9z8.162f2bad76f3fd9d",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-jl9z8.162f2bad76f3fd9d",
                "uid": "faa561bc-5551-4ce8-a40e-6746edfa5156",
                "resourceVersion": "344",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-jl9z8",
                "uid": "5bcbba61-c622-4190-a166-7d42ab943b7b",
                "apiVersion": "v1",
                "resourceVersion": "339"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/kube-proxy-jl9z8 to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-08-27T16:06:56Z",
            "lastTimestamp": "2020-08-27T16:06:56Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-jl9z8.162f2bae1dbddb19",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-jl9z8.162f2bae1dbddb19",
                "uid": "a6fe31f8-5712-4db9-a1fa-4ab7131b2542",
                "resourceVersion": "363",
                "creationTimestamp": "2020-08-27T16:06:59Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:59Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-jl9z8",
                "uid": "5bcbba61-c622-4190-a166-7d42ab943b7b",
                "apiVersion": "v1",
                "resourceVersion": "342",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/kube-proxy:v1.18.3\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:59Z",
            "lastTimestamp": "2020-08-27T16:06:59Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-jl9z8.162f2bae291f2225",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-jl9z8.162f2bae291f2225",
                "uid": "2d4ad6c8-cb3b-4200-bd3b-b7032029dc02",
                "resourceVersion": "365",
                "creationTimestamp": "2020-08-27T16:06:59Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:59Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-jl9z8",
                "uid": "5bcbba61-c622-4190-a166-7d42ab943b7b",
                "apiVersion": "v1",
                "resourceVersion": "342",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Created",
            "message": "Created container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:59Z",
            "lastTimestamp": "2020-08-27T16:06:59Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-jl9z8.162f2bae3efa1fd5",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-jl9z8.162f2bae3efa1fd5",
                "uid": "22acf3d8-ff99-4624-83e0-afea0c8bdf56",
                "resourceVersion": "368",
                "creationTimestamp": "2020-08-27T16:07:00Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:00Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-jl9z8",
                "uid": "5bcbba61-c622-4190-a166-7d42ab943b7b",
                "apiVersion": "v1",
                "resourceVersion": "342",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Started",
            "message": "Started container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:07:00Z",
            "lastTimestamp": "2020-08-27T16:07:00Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy.162f2bad756b3bb0",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy.162f2bad756b3bb0",
                "uid": "c724c9e0-51f7-47b4-b94a-9abb4a147040",
                "resourceVersion": "341",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "DaemonSet",
                "namespace": "kube-system",
                "name": "kube-proxy",
                "uid": "d339850b-f94b-4f1f-bd4f-8f1dfe11f6ac",
                "apiVersion": "apps/v1",
                "resourceVersion": "222"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: kube-proxy-jl9z8",
            "source": {
                "component": "daemonset-controller"
            },
            "firstTimestamp": "2020-08-27T16:06:56Z",
            "lastTimestamp": "2020-08-27T16:06:56Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.162f2bacca780cb2",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.162f2bacca780cb2",
                "uid": "3e67056a-c853-41d1-b4c6-6b7ab7c5cfd8",
                "resourceVersion": "276",
                "creationTimestamp": "2020-08-27T16:06:53Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:53Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "29e75209-5b42-4dc5-97f9-0eadb31037ed",
                "apiVersion": "v1",
                "resourceVersion": "273"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had taint {node.kubernetes.io/not-ready: }, that the pod didn't tolerate.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-08-27T16:06:53Z",
            "lastTimestamp": "2020-08-27T16:06:53Z",
            "count": 2,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.162f2bad76f78801",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.162f2bad76f78801",
                "uid": "d164c7fe-c756-4c03-8128-5053bd729d9a",
                "resourceVersion": "345",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "29e75209-5b42-4dc5-97f9-0eadb31037ed",
                "apiVersion": "v1",
                "resourceVersion": "275"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/storage-provisioner to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-08-27T16:06:56Z",
            "lastTimestamp": "2020-08-27T16:06:56Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.162f2bae27947a22",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.162f2bae27947a22",
                "uid": "0a7a0c80-14ca-4814-9940-bbbc67e473c1",
                "resourceVersion": "402",
                "creationTimestamp": "2020-08-27T16:06:59Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:31Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "29e75209-5b42-4dc5-97f9-0eadb31037ed",
                "apiVersion": "v1",
                "resourceVersion": "343",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Pulled",
            "message": "Container image \"gcr.io/k8s-minikube/storage-provisioner:v2\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:59Z",
            "lastTimestamp": "2020-08-27T16:07:31Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.162f2bae2f9395a8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.162f2bae2f9395a8",
                "uid": "dd3c1908-f873-427f-911e-4a1bfc3f3b26",
                "resourceVersion": "403",
                "creationTimestamp": "2020-08-27T16:06:59Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:31Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "29e75209-5b42-4dc5-97f9-0eadb31037ed",
                "apiVersion": "v1",
                "resourceVersion": "343",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Created",
            "message": "Created container storage-provisioner",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:59Z",
            "lastTimestamp": "2020-08-27T16:07:31Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.162f2bae43cf5cdb",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.162f2bae43cf5cdb",
                "uid": "8f9d3bb4-73ff-429f-8360-c1ec33419674",
                "resourceVersion": "404",
                "creationTimestamp": "2020-08-27T16:07:00Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:31Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "29e75209-5b42-4dc5-97f9-0eadb31037ed",
                "apiVersion": "v1",
                "resourceVersion": "343",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Started",
            "message": "Started container storage-provisioner",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:07:00Z",
            "lastTimestamp": "2020-08-27T16:07:31Z",
            "count": 2,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/replicationcontrollers",
        "resourceVersion": "617"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/services",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/kube-dns",
                "uid": "e5a0c234-f1ad-479a-afb0-0f9841bc48bc",
                "resourceVersion": "212",
                "creationTimestamp": "2020-08-27T16:06:50Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "KubeDNS"
                },
                "annotations": {
                    "prometheus.io/port": "9153",
                    "prometheus.io/scrape": "true"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:50Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:prometheus.io/port": {},
                                    "f:prometheus.io/scrape": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:kubernetes.io/cluster-service": {},
                                    "f:kubernetes.io/name": {}
                                }
                            },
                            "f:spec": {
                                "f:clusterIP": {},
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":53,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":53,\"protocol\":\"UDP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":9153,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:k8s-app": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "metrics",
                        "protocol": "TCP",
                        "port": 9153,
                        "targetPort": 9153
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.96.0.10",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-proxy",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy",
                "uid": "d339850b-f94b-4f1f-bd4f-8f1dfe11f6ac",
                "resourceVersion": "374",
                "generation": 1,
                "creationTimestamp": "2020-08-27T16:06:50Z",
                "labels": {
                    "k8s-app": "kube-proxy"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-08-27T16:06:50Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deprecated.daemonset.template.generation": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {}
                                }
                            },
                            "f:spec": {
                                "f:revisionHistoryLimit": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {}
                                    }
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"kube-proxy\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"NODE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {
                                                                ".": {},
                                                                "f:apiVersion": {},
                                                                "f:fieldPath": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:privileged": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/lib/modules\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    },
                                                    "k:{\"mountPath\":\"/run/xtables.lock\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/var/lib/kube-proxy\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:hostNetwork": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"kube-proxy\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"lib-modules\"}": {
                                                ".": {},
                                                "f:hostPath": {
                                                    ".": {},
                                                    "f:path": {},
                                                    "f:type": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"xtables-lock\"}": {
                                                ".": {},
                                                "f:hostPath": {
                                                    ".": {},
                                                    "f:path": {},
                                                    "f:type": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:updateStrategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-08-27T16:07:01Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:currentNumberScheduled": {},
                                "f:desiredNumberScheduled": {},
                                "f:numberAvailable": {},
                                "f:numberReady": {},
                                "f:observedGeneration": {},
                                "f:updatedNumberScheduled": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-proxy"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-proxy"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-proxy",
                                "configMap": {
                                    "name": "kube-proxy",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kube-proxy",
                                "image": "k8s.gcr.io/kube-proxy:v1.18.3",
                                "command": [
                                    "/usr/local/bin/kube-proxy",
                                    "--config=/var/lib/kube-proxy/config.conf",
                                    "--hostname-override=$(NODE_NAME)"
                                ],
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kube-proxy",
                                        "mountPath": "/var/lib/kube-proxy"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "kube-proxy",
                        "serviceAccount": "kube-proxy",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        }
    ]
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/coredns",
                "uid": "b6b6c399-11d7-4313-92c9-2ca0265d1a2e",
                "resourceVersion": "398",
                "generation": 2,
                "creationTimestamp": "2020-08-27T16:06:50Z",
                "labels": {
                    "k8s-app": "kube-dns"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-08-27T16:06:50Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {}
                                    }
                                },
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"coredns\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:add": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"config-volume\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-08-27T16:07:25Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.6.7",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-08-27T16:06:56Z",
                        "lastTransitionTime": "2020-08-27T16:06:56Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-08-27T16:07:25Z",
                        "lastTransitionTime": "2020-08-27T16:06:56Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"coredns-66bff467f8\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-66bff467f8",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/coredns-66bff467f8",
                "uid": "f066332a-5c77-4862-8ad5-fa744218224f",
                "resourceVersion": "396",
                "generation": 1,
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "66bff467f8"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "coredns",
                        "uid": "b6b6c399-11d7-4313-92c9-2ca0265d1a2e",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-08-27T16:07:25Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deployment.kubernetes.io/desired-replicas": {},
                                    "f:deployment.kubernetes.io/max-replicas": {},
                                    "f:deployment.kubernetes.io/revision": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-hash": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"b6b6c399-11d7-4313-92c9-2ca0265d1a2e\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:replicas": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {},
                                        "f:pod-template-hash": {}
                                    }
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {},
                                            "f:pod-template-hash": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"coredns\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:add": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"config-volume\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:fullyLabeledReplicas": {},
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "66bff467f8"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "66bff467f8"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.6.7",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/pods",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-66bff467f8-nfhgc",
                "generateName": "coredns-66bff467f8-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/coredns-66bff467f8-nfhgc",
                "uid": "1ab263f3-0499-4de1-a603-25f7d1b7c6fa",
                "resourceVersion": "394",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "66bff467f8"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-66bff467f8",
                        "uid": "f066332a-5c77-4862-8ad5-fa744218224f",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:generateName": {},
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-hash": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"f066332a-5c77-4862-8ad5-fa744218224f\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"coredns\"}": {
                                        ".": {},
                                        "f:args": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            },
                                            "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            },
                                            "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            }
                                        },
                                        "f:readinessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:resources": {
                                            ".": {},
                                            "f:limits": {
                                                ".": {},
                                                "f:memory": {}
                                            },
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {},
                                                "f:memory": {}
                                            }
                                        },
                                        "f:securityContext": {
                                            ".": {},
                                            "f:allowPrivilegeEscalation": {},
                                            "f:capabilities": {
                                                ".": {},
                                                "f:add": {},
                                                "f:drop": {}
                                            },
                                            "f:readOnlyRootFilesystem": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:nodeSelector": {
                                    ".": {},
                                    "f:kubernetes.io/os": {}
                                },
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"config-volume\"}": {
                                        ".": {},
                                        "f:configMap": {
                                            ".": {},
                                            "f:defaultMode": {},
                                            "f:items": {},
                                            "f:name": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:25Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.2\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "coredns-token-jtqcp",
                        "secret": {
                            "secretName": "coredns-token-jtqcp",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "k8s.gcr.io/coredns:1.6.7",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "coredns-token-jtqcp",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/ready",
                                "port": 8181,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:07:16Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:07:25Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:07:25Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:07:16Z"
                    }
                ],
                "hostIP": "192.168.99.100",
                "podIP": "172.17.0.2",
                "podIPs": [
                    {
                        "ip": "172.17.0.2"
                    }
                ],
                "startTime": "2020-08-27T16:07:16Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2020-08-27T16:07:18Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/coredns:1.6.7",
                        "imageID": "docker-pullable://k8s.gcr.io/coredns@sha256:2c8d61c46f484d881db43b34d13ca47a269336e576c81cf007ca740fa9ec0800",
                        "containerID": "docker://1d4bce7820301242b6d7205589dbbe810014db58491952537bed81cf56a1e7c9",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "etcd-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/etcd-minikube",
                "uid": "ca8f4a16-05ce-465c-843a-3659afc4ffda",
                "resourceVersion": "377",
                "creationTimestamp": "2020-08-27T16:06:58Z",
                "labels": {
                    "component": "etcd",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/etcd.advertise-client-urls": "https://192.168.99.100:2379",
                    "kubernetes.io/config.hash": "e3064b4cb5e1ec4220321aede0b3cc10",
                    "kubernetes.io/config.mirror": "e3064b4cb5e1ec4220321aede0b3cc10",
                    "kubernetes.io/config.seen": "2020-08-27T16:06:51.535202988Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "a6807cbe-5497-4412-a51a-092b0aa780c0",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:07Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubeadm.kubernetes.io/etcd.advertise-client-urls": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"a6807cbe-5497-4412-a51a-092b0aa780c0\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"etcd\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs/etcd\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/etcd\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"etcd-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"etcd-data\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.99.100\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "etcd-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etcd-data",
                        "hostPath": {
                            "path": "/var/lib/minikube/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "etcd",
                        "image": "k8s.gcr.io/etcd:3.4.3-0",
                        "command": [
                            "etcd",
                            "--advertise-client-urls=https://192.168.99.100:2379",
                            "--cert-file=/var/lib/minikube/certs/etcd/server.crt",
                            "--client-cert-auth=true",
                            "--data-dir=/var/lib/minikube/etcd",
                            "--initial-advertise-peer-urls=https://192.168.99.100:2380",
                            "--initial-cluster=minikube=https://192.168.99.100:2380",
                            "--key-file=/var/lib/minikube/certs/etcd/server.key",
                            "--listen-client-urls=https://127.0.0.1:2379,https://192.168.99.100:2379",
                            "--listen-metrics-urls=http://127.0.0.1:2381",
                            "--listen-peer-urls=https://192.168.99.100:2380",
                            "--name=minikube",
                            "--peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt",
                            "--peer-client-cert-auth=true",
                            "--peer-key-file=/var/lib/minikube/certs/etcd/peer.key",
                            "--peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt",
                            "--snapshot-count=10000",
                            "--trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "etcd-data",
                                "mountPath": "/var/lib/minikube/etcd"
                            },
                            {
                                "name": "etcd-certs",
                                "mountPath": "/var/lib/minikube/certs/etcd"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 15,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    }
                ],
                "hostIP": "192.168.99.100",
                "podIP": "192.168.99.100",
                "podIPs": [
                    {
                        "ip": "192.168.99.100"
                    }
                ],
                "startTime": "2020-08-27T16:06:58Z",
                "containerStatuses": [
                    {
                        "name": "etcd",
                        "state": {
                            "running": {
                                "startedAt": "2020-08-27T16:06:37Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/etcd:3.4.3-0",
                        "imageID": "docker-pullable://k8s.gcr.io/etcd@sha256:4afb99b4690b418ffc2ceb67e1a17376457e441c1f09ab55447f0aaf992fa646",
                        "containerID": "docker://2f46e997e9c267fec632afb7e71107b7ddfa9c0e0e4eb9f2f020b50345c63ae0",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-apiserver-minikube",
                "uid": "3fe5e007-8fab-488a-9970-893137e5c769",
                "resourceVersion": "372",
                "creationTimestamp": "2020-08-27T16:06:58Z",
                "labels": {
                    "component": "kube-apiserver",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": "192.168.99.100:8443",
                    "kubernetes.io/config.hash": "5d746552bb1514ad264ed6541c216635",
                    "kubernetes.io/config.mirror": "5d746552bb1514ad264ed6541c216635",
                    "kubernetes.io/config.seen": "2020-08-27T16:06:51.535209268Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "a6807cbe-5497-4412-a51a-092b0aa780c0",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:00Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"a6807cbe-5497-4412-a51a-092b0aa780c0\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-apiserver\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/ssl/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/share/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"ca-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"k8s-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"usr-share-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.99.100\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-apiserver",
                        "image": "k8s.gcr.io/kube-apiserver:v1.18.3",
                        "command": [
                            "kube-apiserver",
                            "--advertise-address=192.168.99.100",
                            "--allow-privileged=true",
                            "--authorization-mode=Node,RBAC",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota",
                            "--enable-bootstrap-token-auth=true",
                            "--etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt",
                            "--etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt",
                            "--etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key",
                            "--etcd-servers=https://127.0.0.1:2379",
                            "--insecure-port=0",
                            "--kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt",
                            "--kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key",
                            "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                            "--proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt",
                            "--proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key",
                            "--requestheader-allowed-names=front-proxy-client",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--requestheader-extra-headers-prefix=X-Remote-Extra-",
                            "--requestheader-group-headers=X-Remote-Group",
                            "--requestheader-username-headers=X-Remote-User",
                            "--secure-port=8443",
                            "--service-account-key-file=/var/lib/minikube/certs/sa.pub",
                            "--service-cluster-ip-range=10.96.0.0/12",
                            "--tls-cert-file=/var/lib/minikube/certs/apiserver.crt",
                            "--tls-private-key-file=/var/lib/minikube/certs/apiserver.key"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "250m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8443,
                                "host": "192.168.99.100",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 15,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:59Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:59Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:59Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:59Z"
                    }
                ],
                "hostIP": "192.168.99.100",
                "podIP": "192.168.99.100",
                "podIPs": [
                    {
                        "ip": "192.168.99.100"
                    }
                ],
                "startTime": "2020-08-27T16:06:59Z",
                "containerStatuses": [
                    {
                        "name": "kube-apiserver",
                        "state": {
                            "running": {
                                "startedAt": "2020-08-27T16:06:38Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-apiserver:v1.18.3",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-apiserver@sha256:e1c8ce568634f79f76b6e8168c929511ad841ea7692271caf6fd3779c3545c2d",
                        "containerID": "docker://7bc433ebd9921f8971f153030c42af802a3447ba8c575f4960c23e368ed305a3",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-controller-manager-minikube",
                "uid": "a6f12ae3-179c-4495-82dd-dd400784b40f",
                "resourceVersion": "361",
                "creationTimestamp": "2020-08-27T16:06:58Z",
                "labels": {
                    "component": "kube-controller-manager",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "ba963bc1bff8609dc4fc4d359349c120",
                    "kubernetes.io/config.mirror": "ba963bc1bff8609dc4fc4d359349c120",
                    "kubernetes.io/config.seen": "2020-08-27T16:06:51.535210885Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "a6807cbe-5497-4412-a51a-092b0aa780c0",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:59Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"a6807cbe-5497-4412-a51a-092b0aa780c0\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-controller-manager\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/kubernetes/controller-manager.conf\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/etc/ssl/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/libexec/kubernetes/kubelet-plugins/volume/exec\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/share/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"ca-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"flexvolume-dir\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"k8s-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"kubeconfig\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"usr-share-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.99.100\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "flexvolume-dir",
                        "hostPath": {
                            "path": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/controller-manager.conf",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-controller-manager",
                        "image": "k8s.gcr.io/kube-controller-manager:v1.18.3",
                        "command": [
                            "kube-controller-manager",
                            "--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--bind-address=127.0.0.1",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-name=mk",
                            "--cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-signing-key-file=/var/lib/minikube/certs/ca.key",
                            "--controllers=*,bootstrapsigner,tokencleaner",
                            "--kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--leader-elect=false",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--root-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--service-account-private-key-file=/var/lib/minikube/certs/sa.key",
                            "--use-service-account-credentials=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "200m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "flexvolume-dir",
                                "mountPath": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/controller-manager.conf"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 15,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    }
                ],
                "hostIP": "192.168.99.100",
                "podIP": "192.168.99.100",
                "podIPs": [
                    {
                        "ip": "192.168.99.100"
                    }
                ],
                "startTime": "2020-08-27T16:06:58Z",
                "containerStatuses": [
                    {
                        "name": "kube-controller-manager",
                        "state": {
                            "running": {
                                "startedAt": "2020-08-27T16:06:37Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-controller-manager:v1.18.3",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-controller-manager@sha256:d62a4f41625e1631a2683cbdf1c9c9bd27f0b9c5d8d8202990236fc0d5ef1703",
                        "containerID": "docker://f3fe034bdfdd7dc039c87dcd397e8df7c627fea5f6b8b5d81139de40706827e3",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-jl9z8",
                "generateName": "kube-proxy-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-proxy-jl9z8",
                "uid": "5bcbba61-c622-4190-a166-7d42ab943b7b",
                "resourceVersion": "373",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "labels": {
                    "controller-revision-hash": "58b47d6fd4",
                    "k8s-app": "kube-proxy",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "kube-proxy",
                        "uid": "d339850b-f94b-4f1f-bd4f-8f1dfe11f6ac",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:generateName": {},
                                "f:labels": {
                                    ".": {},
                                    "f:controller-revision-hash": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-generation": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"d339850b-f94b-4f1f-bd4f-8f1dfe11f6ac\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:affinity": {
                                    ".": {},
                                    "f:nodeAffinity": {
                                        ".": {},
                                        "f:requiredDuringSchedulingIgnoredDuringExecution": {
                                            ".": {},
                                            "f:nodeSelectorTerms": {}
                                        }
                                    }
                                },
                                "f:containers": {
                                    "k:{\"name\":\"kube-proxy\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:env": {
                                            ".": {},
                                            "k:{\"name\":\"NODE_NAME\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:valueFrom": {
                                                    ".": {},
                                                    "f:fieldRef": {
                                                        ".": {},
                                                        "f:apiVersion": {},
                                                        "f:fieldPath": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:privileged": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/lib/modules\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/run/xtables.lock\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/kube-proxy\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeSelector": {
                                    ".": {},
                                    "f:kubernetes.io/os": {}
                                },
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"kube-proxy\"}": {
                                        ".": {},
                                        "f:configMap": {
                                            ".": {},
                                            "f:defaultMode": {},
                                            "f:name": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"lib-modules\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"xtables-lock\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:01Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.99.100\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-proxy",
                        "configMap": {
                            "name": "kube-proxy",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "xtables-lock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    },
                    {
                        "name": "kube-proxy-token-p4cjb",
                        "secret": {
                            "secretName": "kube-proxy-token-p4cjb",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "k8s.gcr.io/kube-proxy:v1.18.3",
                        "command": [
                            "/usr/local/bin/kube-proxy",
                            "--config=/var/lib/kube-proxy/config.conf",
                            "--hostname-override=$(NODE_NAME)"
                        ],
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-proxy",
                                "mountPath": "/var/lib/kube-proxy"
                            },
                            {
                                "name": "xtables-lock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            },
                            {
                                "name": "kube-proxy-token-p4cjb",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "kube-proxy",
                "serviceAccount": "kube-proxy",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "affinity": {
                    "nodeAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "nodeSelectorTerms": [
                                {
                                    "matchFields": [
                                        {
                                            "key": "metadata.name",
                                            "operator": "In",
                                            "values": [
                                                "minikube"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/pid-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:07:00Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:07:00Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:56Z"
                    }
                ],
                "hostIP": "192.168.99.100",
                "podIP": "192.168.99.100",
                "podIPs": [
                    {
                        "ip": "192.168.99.100"
                    }
                ],
                "startTime": "2020-08-27T16:06:58Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2020-08-27T16:07:00Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-proxy:v1.18.3",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-proxy@sha256:6a093c22e305039b7bd6c3f8eab8f202ad8238066ed210857b25524443aa8aff",
                        "containerID": "docker://a19d162b03aebdaf608acbf5bab23b642b64d78fb48613a948065963b3e1ea1a",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-scheduler-minikube",
                "uid": "3cbb416d-fca5-4991-82c7-3633b00af698",
                "resourceVersion": "362",
                "creationTimestamp": "2020-08-27T16:06:58Z",
                "labels": {
                    "component": "kube-scheduler",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "dcddbd0cc8c89e2cbf4de5d3cca8769f",
                    "kubernetes.io/config.mirror": "dcddbd0cc8c89e2cbf4de5d3cca8769f",
                    "kubernetes.io/config.seen": "2020-08-27T16:06:51.535212448Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "a6807cbe-5497-4412-a51a-092b0aa780c0",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:59Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"a6807cbe-5497-4412-a51a-092b0aa780c0\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-scheduler\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/kubernetes/scheduler.conf\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"kubeconfig\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.99.100\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/scheduler.conf",
                            "type": "FileOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-scheduler",
                        "image": "k8s.gcr.io/kube-scheduler:v1.18.3",
                        "command": [
                            "kube-scheduler",
                            "--authentication-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--bind-address=127.0.0.1",
                            "--kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--leader-elect=false"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/scheduler.conf"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 15,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    }
                ],
                "hostIP": "192.168.99.100",
                "podIP": "192.168.99.100",
                "podIPs": [
                    {
                        "ip": "192.168.99.100"
                    }
                ],
                "startTime": "2020-08-27T16:06:58Z",
                "containerStatuses": [
                    {
                        "name": "kube-scheduler",
                        "state": {
                            "running": {
                                "startedAt": "2020-08-27T16:06:38Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-scheduler:v1.18.3",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-scheduler@sha256:5381cd9680bf5fb16a5c8ac60141eaab242c1c4960f1c32a21807efcca3e765b",
                        "containerID": "docker://30b8498b44fdec55fd6055c819fd8dc9850fe441116053520a70283aaff4a178",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "storage-provisioner",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/storage-provisioner",
                "uid": "29e75209-5b42-4dc5-97f9-0eadb31037ed",
                "resourceVersion": "407",
                "creationTimestamp": "2020-08-27T16:06:53Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "integration-test": "storage-provisioner"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"integration-test\":\"storage-provisioner\"},\"name\":\"storage-provisioner\",\"namespace\":\"kube-system\"},\"spec\":{\"containers\":[{\"command\":[\"/storage-provisioner\"],\"image\":\"gcr.io/k8s-minikube/storage-provisioner:v2\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"storage-provisioner\",\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"hostNetwork\":true,\"serviceAccountName\":\"storage-provisioner\",\"volumes\":[{\"hostPath\":{\"path\":\"/tmp\",\"type\":\"Directory\"},\"name\":\"tmp\"}]}}\n"
                },
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:53Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubectl",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:53Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:addonmanager.kubernetes.io/mode": {},
                                    "f:integration-test": {}
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"storage-provisioner\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/tmp\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"tmp\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:32Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"192.168.99.100\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tmp",
                        "hostPath": {
                            "path": "/tmp",
                            "type": "Directory"
                        }
                    },
                    {
                        "name": "storage-provisioner-token-v44qs",
                        "secret": {
                            "secretName": "storage-provisioner-token-v44qs",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "storage-provisioner",
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v2",
                        "command": [
                            "/storage-provisioner"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "tmp",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "storage-provisioner-token-v44qs",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "storage-provisioner",
                "serviceAccount": "storage-provisioner",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:58Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:07:32Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:07:32Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-08-27T16:06:56Z"
                    }
                ],
                "hostIP": "192.168.99.100",
                "podIP": "192.168.99.100",
                "podIPs": [
                    {
                        "ip": "192.168.99.100"
                    }
                ],
                "startTime": "2020-08-27T16:06:58Z",
                "containerStatuses": [
                    {
                        "name": "storage-provisioner",
                        "state": {
                            "running": {
                                "startedAt": "2020-08-27T16:07:31Z"
                            }
                        },
                        "lastState": {
                            "terminated": {
                                "exitCode": 1,
                                "reason": "Error",
                                "startedAt": "2020-08-27T16:07:00Z",
                                "finishedAt": "2020-08-27T16:07:30Z",
                                "containerID": "docker://1803f925b6a76a1dd18c028ccda874147f7ffaaddc3b1d406056ebe8d7973549"
                            }
                        },
                        "ready": true,
                        "restartCount": 1,
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v2",
                        "imageID": "docker-pullable://gcr.io/k8s-minikube/storage-provisioner@sha256:a7b2848b673e6a0927a16f30445d8f1b66f1504a35def0efa35e3dcac56b713e",
                        "containerID": "docker://da7815d4309e678a609a3dea850aa262b246a0b02028987733c08aeb080e8141",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        }
    ]
}
==== START logs for container coredns of pod kube-system/coredns-66bff467f8-nfhgc ====
.:53
[INFO] plugin/reload: Running configuration MD5 = 4e235fcc3696966e76816bcd9034ebc7
CoreDNS-1.6.7
linux/amd64, go1.13.6, da7f65b
==== END logs for container coredns of pod kube-system/coredns-66bff467f8-nfhgc ====
==== START logs for container etcd of pod kube-system/etcd-minikube ====
[WARNING] Deprecated '--logger=capnslog' flag is set; use '--logger=zap' flag instead
2020-08-27 16:06:37.788554 I | etcdmain: etcd Version: 3.4.3
2020-08-27 16:06:37.788585 I | etcdmain: Git SHA: 3cf2f69b5
2020-08-27 16:06:37.788588 I | etcdmain: Go Version: go1.12.12
2020-08-27 16:06:37.788591 I | etcdmain: Go OS/Arch: linux/amd64
2020-08-27 16:06:37.788594 I | etcdmain: setting maximum number of CPUs to 2, total number of available CPUs is 2
[WARNING] Deprecated '--logger=capnslog' flag is set; use '--logger=zap' flag instead
2020-08-27 16:06:37.788658 I | embed: peerTLS: cert = /var/lib/minikube/certs/etcd/peer.crt, key = /var/lib/minikube/certs/etcd/peer.key, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2020-08-27 16:06:37.790869 I | embed: name = minikube
2020-08-27 16:06:37.791130 I | embed: data dir = /var/lib/minikube/etcd
2020-08-27 16:06:37.791289 I | embed: member dir = /var/lib/minikube/etcd/member
2020-08-27 16:06:37.791298 I | embed: heartbeat = 100ms
2020-08-27 16:06:37.791301 I | embed: election = 1000ms
2020-08-27 16:06:37.791307 I | embed: snapshot count = 10000
2020-08-27 16:06:37.791313 I | embed: advertise client URLs = https://192.168.99.100:2379
2020-08-27 16:06:37.807708 I | etcdserver: starting member 7feb3ee23ce5b4a7 in cluster a9449303b0ccd8c0
raft2020/08/27 16:06:37 INFO: 7feb3ee23ce5b4a7 switched to configuration voters=()
raft2020/08/27 16:06:37 INFO: 7feb3ee23ce5b4a7 became follower at term 0
raft2020/08/27 16:06:37 INFO: newRaft 7feb3ee23ce5b4a7 [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]
raft2020/08/27 16:06:37 INFO: 7feb3ee23ce5b4a7 became follower at term 1
raft2020/08/27 16:06:37 INFO: 7feb3ee23ce5b4a7 switched to configuration voters=(9217530203749069991)
2020-08-27 16:06:37.826336 W | auth: simple token is not cryptographically signed
2020-08-27 16:06:37.835261 I | etcdserver: starting server... [version: 3.4.3, cluster version: to_be_decided]
2020-08-27 16:06:37.837421 I | etcdserver: 7feb3ee23ce5b4a7 as single-node; fast-forwarding 9 ticks (election ticks 10)
raft2020/08/27 16:06:37 INFO: 7feb3ee23ce5b4a7 switched to configuration voters=(9217530203749069991)
2020-08-27 16:06:37.838712 I | etcdserver/membership: added member 7feb3ee23ce5b4a7 [https://192.168.99.100:2380] to cluster a9449303b0ccd8c0
2020-08-27 16:06:37.842958 I | embed: ClientTLS: cert = /var/lib/minikube/certs/etcd/server.crt, key = /var/lib/minikube/certs/etcd/server.key, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2020-08-27 16:06:37.843691 I | embed: listening for peers on 192.168.99.100:2380
2020-08-27 16:06:37.846332 I | embed: listening for metrics on http://127.0.0.1:2381
raft2020/08/27 16:06:38 INFO: 7feb3ee23ce5b4a7 is starting a new election at term 1
raft2020/08/27 16:06:38 INFO: 7feb3ee23ce5b4a7 became candidate at term 2
raft2020/08/27 16:06:38 INFO: 7feb3ee23ce5b4a7 received MsgVoteResp from 7feb3ee23ce5b4a7 at term 2
raft2020/08/27 16:06:38 INFO: 7feb3ee23ce5b4a7 became leader at term 2
raft2020/08/27 16:06:38 INFO: raft.node: 7feb3ee23ce5b4a7 elected leader 7feb3ee23ce5b4a7 at term 2
2020-08-27 16:06:38.594837 I | etcdserver: published {Name:minikube ClientURLs:[https://192.168.99.100:2379]} to cluster a9449303b0ccd8c0
2020-08-27 16:06:38.812841 I | etcdserver: setting up the initial cluster version to 3.4
2020-08-27 16:06:39.339138 I | embed: ready to serve client requests
2020-08-27 16:06:39.579028 I | embed: serving client requests on 192.168.99.100:2379
2020-08-27 16:06:39.579075 I | embed: ready to serve client requests
2020-08-27 16:06:39.584735 I | embed: serving client requests on 127.0.0.1:2379
2020-08-27 16:06:39.588860 N | etcdserver/membership: set the initial cluster version to 3.4
2020-08-27 16:06:39.634952 I | etcdserver/api: enabled capabilities for version 3.4
==== END logs for container etcd of pod kube-system/etcd-minikube ====
==== START logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
Flag --insecure-port has been deprecated, This flag will be removed in a future version.
I0827 16:06:38.161492       1 server.go:656] external host was not specified, using 192.168.99.100
I0827 16:06:38.162181       1 server.go:153] Version: v1.18.3
I0827 16:06:39.604830       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0827 16:06:39.608242       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I0827 16:06:39.610726       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0827 16:06:39.619944       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I0827 16:06:39.628723       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:39.628931       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.520377       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.521338       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.547691       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.550062       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.618161       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.618840       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.653082       1 master.go:270] Using reconciler: lease
I0827 16:06:40.653892       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.655092       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.674063       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.675537       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.690888       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.691119       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.715807       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.729499       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.752470       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.753998       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.774174       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.775584       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.788009       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.789689       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.810032       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.811760       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.830606       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.833390       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.849038       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.851657       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.869800       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.870770       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.891910       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.892654       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.912082       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.912804       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.927257       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.928735       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.962776       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.963290       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:40.987512       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:40.989646       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.018686       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.020158       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.050903       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.051162       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.066973       1 rest.go:113] the default service ipfamily for this cluster is: IPv4
I0827 16:06:41.249104       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.249554       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.269764       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.270002       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.290730       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.291536       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.310524       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.311364       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.333916       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.334170       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.374372       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.392697       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.444996       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.446998       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.468779       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.470952       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.503376       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.503395       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.540038       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.541829       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.562164       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.564126       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.578801       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.579840       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.600920       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.602872       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.622288       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.623667       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.640926       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.643059       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.661511       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.662048       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.684084       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.684417       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.701484       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.701643       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.722281       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.723118       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.743753       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.743915       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.773168       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.773390       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.792198       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.792393       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.810162       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.810388       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.831913       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.832108       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.857181       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.857813       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.873728       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.874008       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.894971       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.895145       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.913714       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.913872       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.928189       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.928204       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.947009       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.947024       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.957629       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.957642       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.969127       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.969141       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:41.985839       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:41.986604       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.004958       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.004972       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.025319       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.025478       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.040041       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.040200       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.059758       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.060011       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.075738       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.075965       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.093849       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.094043       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.110839       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.111048       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.125364       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.125555       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.171863       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.172615       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.191369       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.192182       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.209004       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.209662       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
W0827 16:06:42.386076       1 genericapiserver.go:409] Skipping API batch/v2alpha1 because it has no resources.
W0827 16:06:42.403135       1 genericapiserver.go:409] Skipping API discovery.k8s.io/v1alpha1 because it has no resources.
W0827 16:06:42.483919       1 genericapiserver.go:409] Skipping API node.k8s.io/v1alpha1 because it has no resources.
W0827 16:06:42.508163       1 genericapiserver.go:409] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.
W0827 16:06:42.513079       1 genericapiserver.go:409] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.
W0827 16:06:42.530321       1 genericapiserver.go:409] Skipping API storage.k8s.io/v1alpha1 because it has no resources.
W0827 16:06:42.553402       1 genericapiserver.go:409] Skipping API apps/v1beta2 because it has no resources.
W0827 16:06:42.553590       1 genericapiserver.go:409] Skipping API apps/v1beta1 because it has no resources.
I0827 16:06:42.563541       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0827 16:06:42.563726       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I0827 16:06:42.566988       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.567322       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:42.586001       1 client.go:361] parsed scheme: "endpoint"
I0827 16:06:42.586207       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0827 16:06:45.906025       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I0827 16:06:45.906438       1 secure_serving.go:178] Serving securely on [::]:8443
I0827 16:06:45.906464       1 tlsconfig.go:240] Starting DynamicServingCertificateController
I0827 16:06:45.911153       1 controller.go:81] Starting OpenAPI AggregationController
I0827 16:06:45.911786       1 apiservice_controller.go:94] Starting APIServiceRegistrationController
I0827 16:06:45.912392       1 cache.go:32] Waiting for caches to sync for APIServiceRegistrationController controller
I0827 16:06:45.913644       1 available_controller.go:387] Starting AvailableConditionController
I0827 16:06:45.913900       1 cache.go:32] Waiting for caches to sync for AvailableConditionController controller
I0827 16:06:45.913939       1 crd_finalizer.go:266] Starting CRDFinalizer
I0827 16:06:45.914073       1 autoregister_controller.go:141] Starting autoregister controller
I0827 16:06:45.914081       1 cache.go:32] Waiting for caches to sync for autoregister controller
I0827 16:06:45.914929       1 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller
I0827 16:06:45.916516       1 shared_informer.go:223] Waiting for caches to sync for cluster_authentication_trust_controller
I0827 16:06:45.906474       1 dynamic_serving_content.go:130] Starting serving-cert::/var/lib/minikube/certs/apiserver.crt::/var/lib/minikube/certs/apiserver.key
I0827 16:06:45.928685       1 controller.go:86] Starting OpenAPI controller
I0827 16:06:45.928864       1 customresource_discovery_controller.go:209] Starting DiscoveryController
I0827 16:06:45.928878       1 naming_controller.go:291] Starting NamingConditionController
I0827 16:06:45.928892       1 establishing_controller.go:76] Starting EstablishingController
I0827 16:06:45.928901       1 nonstructuralschema_controller.go:186] Starting NonStructuralSchemaConditionController
I0827 16:06:45.928918       1 apiapproval_controller.go:186] Starting KubernetesAPIApprovalPolicyConformantConditionController
I0827 16:06:45.928929       1 crdregistration_controller.go:111] Starting crd-autoregister controller
I0827 16:06:45.928933       1 shared_informer.go:223] Waiting for caches to sync for crd-autoregister
I0827 16:06:45.928951       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I0827 16:06:45.928968       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I0827 16:06:45.906481       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
E0827 16:06:46.004290       1 controller.go:152] Unable to remove old endpoints from kubernetes service: StorageError: key not found, Code: 1, Key: /registry/masterleases/192.168.99.100, ResourceVersion: 0, AdditionalErrorMsg: 
I0827 16:06:46.117177       1 cache.go:39] Caches are synced for autoregister controller
I0827 16:06:46.118186       1 cache.go:39] Caches are synced for APIServiceRegistrationController controller
I0827 16:06:46.118378       1 cache.go:39] Caches are synced for AvailableConditionController controller
I0827 16:06:46.120649       1 shared_informer.go:230] Caches are synced for cluster_authentication_trust_controller 
I0827 16:06:46.132799       1 shared_informer.go:230] Caches are synced for crd-autoregister 
I0827 16:06:46.905818       1 controller.go:130] OpenAPI AggregationController: action for item : Nothing (removed from the queue).
I0827 16:06:46.905834       1 controller.go:130] OpenAPI AggregationController: action for item k8s_internal_local_delegation_chain_0000000000: Nothing (removed from the queue).
I0827 16:06:46.928606       1 storage_scheduling.go:134] created PriorityClass system-node-critical with value 2000001000
I0827 16:06:46.943815       1 storage_scheduling.go:134] created PriorityClass system-cluster-critical with value 2000000000
I0827 16:06:46.943974       1 storage_scheduling.go:143] all system priority classes are created successfully or already exist.
I0827 16:06:48.019559       1 controller.go:606] quota admission added evaluator for: roles.rbac.authorization.k8s.io
I0827 16:06:48.128793       1 controller.go:606] quota admission added evaluator for: rolebindings.rbac.authorization.k8s.io
W0827 16:06:48.368542       1 lease.go:224] Resetting endpoints for master service "kubernetes" to [192.168.99.100]
I0827 16:06:48.369657       1 controller.go:606] quota admission added evaluator for: endpoints
I0827 16:06:48.380012       1 controller.go:606] quota admission added evaluator for: endpointslices.discovery.k8s.io
I0827 16:06:49.356250       1 controller.go:606] quota admission added evaluator for: serviceaccounts
I0827 16:06:50.501898       1 controller.go:606] quota admission added evaluator for: deployments.apps
I0827 16:06:50.682366       1 controller.go:606] quota admission added evaluator for: daemonsets.apps
I0827 16:06:56.209419       1 controller.go:606] quota admission added evaluator for: replicasets.apps
I0827 16:06:56.707509       1 controller.go:606] quota admission added evaluator for: controllerrevisions.apps
I0827 16:06:57.794877       1 controller.go:606] quota admission added evaluator for: leases.coordination.k8s.io
==== END logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
==== START logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
I0827 16:06:39.632758       1 serving.go:313] Generated self-signed cert in-memory
I0827 16:06:40.503425       1 controllermanager.go:161] Version: v1.18.3
I0827 16:06:40.507051       1 secure_serving.go:178] Serving securely on 127.0.0.1:10257
I0827 16:06:40.508413       1 tlsconfig.go:240] Starting DynamicServingCertificateController
I0827 16:06:40.508468       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I0827 16:06:40.508513       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I0827 16:06:40.509529       1 deprecated_insecure_serving.go:53] Serving insecurely on [::]:10252
I0827 16:06:49.333014       1 plugins.go:100] No cloud provider specified.
I0827 16:06:49.335529       1 shared_informer.go:223] Waiting for caches to sync for tokens
I0827 16:06:49.436676       1 shared_informer.go:230] Caches are synced for tokens 
I0827 16:06:49.483732       1 controllermanager.go:533] Started "csrapproving"
W0827 16:06:49.485430       1 controllermanager.go:525] Skipping "root-ca-cert-publisher"
I0827 16:06:49.485855       1 certificate_controller.go:119] Starting certificate controller "csrapproving"
I0827 16:06:49.487024       1 shared_informer.go:223] Waiting for caches to sync for certificate-csrapproving
I0827 16:06:49.531739       1 controllermanager.go:533] Started "endpoint"
I0827 16:06:49.532892       1 endpoints_controller.go:182] Starting endpoint controller
I0827 16:06:49.533578       1 shared_informer.go:223] Waiting for caches to sync for endpoint
I0827 16:06:49.596054       1 controllermanager.go:533] Started "daemonset"
I0827 16:06:49.597482       1 daemon_controller.go:257] Starting daemon sets controller
I0827 16:06:49.597899       1 shared_informer.go:223] Waiting for caches to sync for daemon sets
I0827 16:06:49.661208       1 controllermanager.go:533] Started "replicaset"
W0827 16:06:49.663775       1 controllermanager.go:525] Skipping "nodeipam"
I0827 16:06:49.663029       1 replica_set.go:181] Starting replicaset controller
I0827 16:06:49.665639       1 shared_informer.go:223] Waiting for caches to sync for ReplicaSet
I0827 16:06:49.728543       1 controllermanager.go:533] Started "pvc-protection"
I0827 16:06:49.733543       1 pvc_protection_controller.go:101] Starting PVC protection controller
I0827 16:06:49.748310       1 shared_informer.go:223] Waiting for caches to sync for PVC protection
I0827 16:06:50.346249       1 controllermanager.go:533] Started "garbagecollector"
I0827 16:06:50.346665       1 garbagecollector.go:133] Starting garbage collector controller
I0827 16:06:50.346675       1 shared_informer.go:223] Waiting for caches to sync for garbage collector
I0827 16:06:50.346706       1 graph_builder.go:282] GraphBuilder running
I0827 16:06:50.481603       1 controllermanager.go:533] Started "job"
I0827 16:06:50.482369       1 job_controller.go:144] Starting job controller
I0827 16:06:50.482703       1 shared_informer.go:223] Waiting for caches to sync for job
I0827 16:06:50.569106       1 controllermanager.go:533] Started "statefulset"
I0827 16:06:50.569490       1 stateful_set.go:146] Starting stateful set controller
I0827 16:06:50.569496       1 shared_informer.go:223] Waiting for caches to sync for stateful set
I0827 16:06:50.686856       1 controllermanager.go:533] Started "persistentvolume-expander"
I0827 16:06:50.687338       1 expand_controller.go:319] Starting expand controller
I0827 16:06:50.687344       1 shared_informer.go:223] Waiting for caches to sync for expand
I0827 16:06:50.829117       1 controllermanager.go:533] Started "disruption"
I0827 16:06:50.829200       1 disruption.go:331] Starting disruption controller
I0827 16:06:50.829205       1 shared_informer.go:223] Waiting for caches to sync for disruption
E0827 16:06:50.889404       1 core.go:89] Failed to start service controller: WARNING: no cloud provider provided, services of type LoadBalancer will fail
W0827 16:06:50.889564       1 controllermanager.go:525] Skipping "service"
I0827 16:06:51.141253       1 controllermanager.go:533] Started "attachdetach"
I0827 16:06:51.141293       1 attach_detach_controller.go:338] Starting attach detach controller
I0827 16:06:51.141299       1 shared_informer.go:223] Waiting for caches to sync for attach detach
I0827 16:06:51.384483       1 request.go:621] Throttling request took 1.033124175s, request: GET:https://control-plane.minikube.internal:8443/apis/scheduling.k8s.io/v1?timeout=32s
I0827 16:06:51.642863       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for networkpolicies.networking.k8s.io
I0827 16:06:51.642913       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for leases.coordination.k8s.io
I0827 16:06:51.642940       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for endpoints
W0827 16:06:51.642954       1 shared_informer.go:461] resyncPeriod 49790238658214 is smaller than resyncCheckPeriod 86191532272655 and the informer has already started. Changing it to 86191532272655
I0827 16:06:51.642991       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for ingresses.extensions
I0827 16:06:51.643006       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for poddisruptionbudgets.policy
I0827 16:06:51.643019       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for roles.rbac.authorization.k8s.io
I0827 16:06:51.643048       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for deployments.apps
I0827 16:06:51.643061       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for ingresses.networking.k8s.io
I0827 16:06:51.643072       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for replicasets.apps
W0827 16:06:51.643080       1 shared_informer.go:461] resyncPeriod 71742380799175 is smaller than resyncCheckPeriod 86191532272655 and the informer has already started. Changing it to 86191532272655
I0827 16:06:51.643105       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for serviceaccounts
I0827 16:06:51.643119       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for rolebindings.rbac.authorization.k8s.io
I0827 16:06:51.643141       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for daemonsets.apps
I0827 16:06:51.643154       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for statefulsets.apps
I0827 16:06:51.643166       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for jobs.batch
I0827 16:06:51.643180       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for cronjobs.batch
I0827 16:06:51.643204       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for controllerrevisions.apps
I0827 16:06:51.643217       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for events.events.k8s.io
I0827 16:06:51.643295       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for podtemplates
I0827 16:06:51.643475       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for horizontalpodautoscalers.autoscaling
I0827 16:06:51.643509       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for endpointslices.discovery.k8s.io
I0827 16:06:51.643531       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for limitranges
I0827 16:06:51.643539       1 controllermanager.go:533] Started "resourcequota"
I0827 16:06:51.643726       1 resource_quota_controller.go:272] Starting resource quota controller
I0827 16:06:51.643733       1 shared_informer.go:223] Waiting for caches to sync for resource quota
I0827 16:06:51.643745       1 resource_quota_monitor.go:303] QuotaMonitor running
I0827 16:06:51.713606       1 controllermanager.go:533] Started "persistentvolume-binder"
I0827 16:06:51.715133       1 pv_controller_base.go:295] Starting persistent volume controller
I0827 16:06:51.715408       1 shared_informer.go:223] Waiting for caches to sync for persistent volume
I0827 16:06:51.893355       1 node_lifecycle_controller.go:78] Sending events to api server
E0827 16:06:51.896023       1 core.go:229] failed to start cloud node lifecycle controller: no cloud provider provided
W0827 16:06:51.896819       1 controllermanager.go:525] Skipping "cloud-node-lifecycle"
I0827 16:06:52.161906       1 controllermanager.go:533] Started "serviceaccount"
I0827 16:06:52.162312       1 serviceaccounts_controller.go:117] Starting service account controller
I0827 16:06:52.162916       1 shared_informer.go:223] Waiting for caches to sync for service account
I0827 16:06:52.394577       1 controllermanager.go:533] Started "deployment"
I0827 16:06:52.394819       1 deployment_controller.go:153] Starting deployment controller
I0827 16:06:52.394826       1 shared_informer.go:223] Waiting for caches to sync for deployment
I0827 16:06:52.541964       1 controllermanager.go:533] Started "csrcleaner"
I0827 16:06:52.545602       1 cleaner.go:82] Starting CSR cleaner controller
I0827 16:06:52.788765       1 controllermanager.go:533] Started "cronjob"
I0827 16:06:52.788829       1 cronjob_controller.go:97] Starting CronJob Manager
I0827 16:06:52.942112       1 controllermanager.go:533] Started "csrsigning"
I0827 16:06:52.942348       1 certificate_controller.go:119] Starting certificate controller "csrsigning"
I0827 16:06:52.942358       1 shared_informer.go:223] Waiting for caches to sync for certificate-csrsigning
I0827 16:06:52.942379       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I0827 16:06:53.092221       1 node_lifecycle_controller.go:384] Sending events to api server.
I0827 16:06:53.092384       1 taint_manager.go:163] Sending events to api server.
I0827 16:06:53.092428       1 node_lifecycle_controller.go:512] Controller will reconcile labels.
I0827 16:06:53.092444       1 controllermanager.go:533] Started "nodelifecycle"
I0827 16:06:53.092472       1 node_lifecycle_controller.go:546] Starting node controller
I0827 16:06:53.093956       1 shared_informer.go:223] Waiting for caches to sync for taint
I0827 16:06:53.339637       1 controllermanager.go:533] Started "podgc"
I0827 16:06:53.339675       1 gc_controller.go:89] Starting GC controller
I0827 16:06:53.339681       1 shared_informer.go:223] Waiting for caches to sync for GC
I0827 16:06:53.616480       1 controllermanager.go:533] Started "namespace"
I0827 16:06:53.616521       1 namespace_controller.go:200] Starting namespace controller
I0827 16:06:53.616527       1 shared_informer.go:223] Waiting for caches to sync for namespace
I0827 16:06:54.291026       1 controllermanager.go:533] Started "horizontalpodautoscaling"
W0827 16:06:54.291052       1 controllermanager.go:525] Skipping "ttl-after-finished"
I0827 16:06:54.291957       1 horizontal.go:169] Starting HPA controller
I0827 16:06:54.291971       1 shared_informer.go:223] Waiting for caches to sync for HPA
I0827 16:06:54.543781       1 controllermanager.go:533] Started "ttl"
I0827 16:06:54.543800       1 core.go:239] Will not configure cloud provider routes for allocate-node-cidrs: false, configure-cloud-routes: true.
W0827 16:06:54.543805       1 controllermanager.go:525] Skipping "route"
I0827 16:06:54.543831       1 ttl_controller.go:118] Starting TTL controller
I0827 16:06:54.543836       1 shared_informer.go:223] Waiting for caches to sync for TTL
I0827 16:06:54.789728       1 controllermanager.go:533] Started "pv-protection"
I0827 16:06:54.789761       1 pv_protection_controller.go:83] Starting PV protection controller
I0827 16:06:54.789766       1 shared_informer.go:223] Waiting for caches to sync for PV protection
I0827 16:06:55.044003       1 controllermanager.go:533] Started "tokencleaner"
I0827 16:06:55.045522       1 tokencleaner.go:118] Starting token cleaner controller
I0827 16:06:55.045577       1 shared_informer.go:223] Waiting for caches to sync for token_cleaner
I0827 16:06:55.045603       1 shared_informer.go:230] Caches are synced for token_cleaner 
I0827 16:06:55.288693       1 controllermanager.go:533] Started "clusterrole-aggregation"
I0827 16:06:55.289166       1 clusterroleaggregation_controller.go:149] Starting ClusterRoleAggregator
I0827 16:06:55.289705       1 shared_informer.go:223] Waiting for caches to sync for ClusterRoleAggregator
I0827 16:06:55.542441       1 endpointslice_controller.go:213] Starting endpoint slice controller
I0827 16:06:55.543510       1 shared_informer.go:223] Waiting for caches to sync for endpoint_slice
I0827 16:06:55.542439       1 controllermanager.go:533] Started "endpointslice"
I0827 16:06:55.790848       1 controllermanager.go:533] Started "replicationcontroller"
I0827 16:06:55.791306       1 replica_set.go:181] Starting replicationcontroller controller
I0827 16:06:55.791474       1 shared_informer.go:223] Waiting for caches to sync for ReplicationController
I0827 16:06:56.041944       1 controllermanager.go:533] Started "bootstrapsigner"
I0827 16:06:56.043698       1 shared_informer.go:223] Waiting for caches to sync for bootstrap_signer
I0827 16:06:56.048470       1 shared_informer.go:223] Waiting for caches to sync for garbage collector
I0827 16:06:56.086535       1 shared_informer.go:223] Waiting for caches to sync for resource quota
I0827 16:06:56.101165       1 shared_informer.go:230] Caches are synced for ClusterRoleAggregator 
W0827 16:06:56.108301       1 actual_state_of_world.go:506] Failed to update statusUpdateNeeded field in actual state of world: Failed to set statusUpdateNeeded to needed true, because nodeName="minikube" does not exist
I0827 16:06:56.120545       1 shared_informer.go:230] Caches are synced for namespace 
I0827 16:06:56.134769       1 shared_informer.go:230] Caches are synced for certificate-csrapproving 
I0827 16:06:56.142143       1 shared_informer.go:230] Caches are synced for GC 
I0827 16:06:56.154509       1 shared_informer.go:230] Caches are synced for bootstrap_signer 
I0827 16:06:56.158273       1 shared_informer.go:230] Caches are synced for endpoint 
I0827 16:06:56.162267       1 shared_informer.go:230] Caches are synced for PVC protection 
I0827 16:06:56.164353       1 shared_informer.go:230] Caches are synced for certificate-csrsigning 
I0827 16:06:56.177039       1 shared_informer.go:230] Caches are synced for service account 
I0827 16:06:56.178157       1 shared_informer.go:230] Caches are synced for ReplicaSet 
I0827 16:06:56.166898       1 shared_informer.go:230] Caches are synced for endpoint_slice 
I0827 16:06:56.167088       1 shared_informer.go:230] Caches are synced for TTL 
I0827 16:06:56.176903       1 shared_informer.go:230] Caches are synced for stateful set 
I0827 16:06:56.192711       1 shared_informer.go:230] Caches are synced for PV protection 
I0827 16:06:56.194981       1 shared_informer.go:230] Caches are synced for expand 
I0827 16:06:56.198843       1 shared_informer.go:230] Caches are synced for deployment 
I0827 16:06:56.216782       1 shared_informer.go:230] Caches are synced for persistent volume 
E0827 16:06:56.240572       1 clusterroleaggregation_controller.go:181] edit failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "edit": the object has been modified; please apply your changes to the latest version and try again
I0827 16:06:56.246061       1 shared_informer.go:230] Caches are synced for attach detach 
I0827 16:06:56.272524       1 event.go:278] Event(v1.ObjectReference{Kind:"Deployment", Namespace:"kube-system", Name:"coredns", UID:"b6b6c399-11d7-4313-92c9-2ca0265d1a2e", APIVersion:"apps/v1", ResourceVersion:"245", FieldPath:""}): type: 'Normal' reason: 'ScalingReplicaSet' Scaled up replica set coredns-66bff467f8 to 1
I0827 16:06:56.335660       1 event.go:278] Event(v1.ObjectReference{Kind:"ReplicaSet", Namespace:"kube-system", Name:"coredns-66bff467f8", UID:"f066332a-5c77-4862-8ad5-fa744218224f", APIVersion:"apps/v1", ResourceVersion:"307", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: coredns-66bff467f8-nfhgc
I0827 16:06:56.383508       1 shared_informer.go:230] Caches are synced for job 
I0827 16:06:56.393305       1 shared_informer.go:230] Caches are synced for HPA 
I0827 16:06:56.430041       1 shared_informer.go:230] Caches are synced for disruption 
I0827 16:06:56.430054       1 disruption.go:339] Sending events to api server.
I0827 16:06:56.492858       1 shared_informer.go:230] Caches are synced for ReplicationController 
I0827 16:06:56.644814       1 shared_informer.go:230] Caches are synced for resource quota 
I0827 16:06:56.649310       1 shared_informer.go:230] Caches are synced for garbage collector 
I0827 16:06:56.649516       1 garbagecollector.go:142] Garbage collector: all resource monitors have synced. Proceeding to collect garbage
I0827 16:06:56.650940       1 shared_informer.go:230] Caches are synced for garbage collector 
I0827 16:06:56.690769       1 shared_informer.go:230] Caches are synced for resource quota 
I0827 16:06:56.695600       1 shared_informer.go:230] Caches are synced for taint 
I0827 16:06:56.695988       1 node_lifecycle_controller.go:1433] Initializing eviction metric for zone: 
W0827 16:06:56.696090       1 node_lifecycle_controller.go:1048] Missing timestamp for Node minikube. Assuming now as a timestamp.
I0827 16:06:56.696492       1 node_lifecycle_controller.go:1249] Controller detected that zone  is now in state Normal.
I0827 16:06:56.697025       1 event.go:278] Event(v1.ObjectReference{Kind:"Node", Namespace:"", Name:"minikube", UID:"a6807cbe-5497-4412-a51a-092b0aa780c0", APIVersion:"v1", ResourceVersion:"", FieldPath:""}): type: 'Normal' reason: 'RegisteredNode' Node minikube event: Registered Node minikube in Controller
I0827 16:06:56.697147       1 taint_manager.go:187] Starting NoExecuteTaintManager
I0827 16:06:56.698914       1 shared_informer.go:230] Caches are synced for daemon sets 
I0827 16:06:56.739452       1 event.go:278] Event(v1.ObjectReference{Kind:"DaemonSet", Namespace:"kube-system", Name:"kube-proxy", UID:"d339850b-f94b-4f1f-bd4f-8f1dfe11f6ac", APIVersion:"apps/v1", ResourceVersion:"222", FieldPath:""}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: kube-proxy-jl9z8
I0827 16:07:01.697161       1 node_lifecycle_controller.go:1199] Controller detected that all Nodes are not-Ready. Entering master disruption mode.
I0827 16:07:11.702150       1 node_lifecycle_controller.go:1226] Controller detected that some Nodes are Ready. Exiting master disruption mode.
==== END logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-jl9z8 ====
W0827 16:07:00.383593       1 server_others.go:559] Unknown proxy mode "", assuming iptables proxy
I0827 16:07:00.399614       1 node.go:136] Successfully retrieved node IP: 192.168.99.100
I0827 16:07:00.400090       1 server_others.go:186] Using iptables Proxier.
W0827 16:07:00.400118       1 server_others.go:436] detect-local-mode set to ClusterCIDR, but no cluster CIDR defined
I0827 16:07:00.400138       1 server_others.go:447] detect-local-mode: ClusterCIDR , defaulting to no-op detect-local
I0827 16:07:00.402169       1 server.go:583] Version: v1.18.3
I0827 16:07:00.403405       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_max' to 131072
I0827 16:07:00.404027       1 conntrack.go:52] Setting nf_conntrack_max to 131072
I0827 16:07:00.404108       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_established' to 86400
I0827 16:07:00.404615       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_close_wait' to 3600
I0827 16:07:00.406761       1 config.go:315] Starting service config controller
I0827 16:07:00.406770       1 shared_informer.go:223] Waiting for caches to sync for service config
I0827 16:07:00.406791       1 config.go:133] Starting endpoints config controller
I0827 16:07:00.406798       1 shared_informer.go:223] Waiting for caches to sync for endpoints config
I0827 16:07:00.510017       1 shared_informer.go:230] Caches are synced for endpoints config 
I0827 16:07:00.510520       1 shared_informer.go:230] Caches are synced for service config 
==== END logs for container kube-proxy of pod kube-system/kube-proxy-jl9z8 ====
==== START logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
I0827 16:06:38.382592       1 registry.go:150] Registering EvenPodsSpread predicate and priority function
I0827 16:06:38.382823       1 registry.go:150] Registering EvenPodsSpread predicate and priority function
I0827 16:06:40.214719       1 serving.go:313] Generated self-signed cert in-memory
W0827 16:06:46.040953       1 authentication.go:349] Unable to get configmap/extension-apiserver-authentication in kube-system.  Usually fixed by 'kubectl create rolebinding -n kube-system ROLEBINDING_NAME --role=extension-apiserver-authentication-reader --serviceaccount=YOUR_NS:YOUR_SA'
W0827 16:06:46.041437       1 authentication.go:297] Error looking up in-cluster authentication configuration: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot get resource "configmaps" in API group "" in the namespace "kube-system"
W0827 16:06:46.041453       1 authentication.go:298] Continuing without authentication configuration. This may treat all requests as anonymous.
W0827 16:06:46.041459       1 authentication.go:299] To require authentication configuration lookup to succeed, set --authentication-tolerate-lookup-failure=false
I0827 16:06:46.106837       1 registry.go:150] Registering EvenPodsSpread predicate and priority function
I0827 16:06:46.107024       1 registry.go:150] Registering EvenPodsSpread predicate and priority function
W0827 16:06:46.108902       1 authorization.go:47] Authorization is disabled
W0827 16:06:46.114378       1 authentication.go:40] Authentication is disabled
I0827 16:06:46.114426       1 deprecated_insecure_serving.go:51] Serving healthz insecurely on [::]:10251
I0827 16:06:46.119287       1 configmap_cafile_content.go:202] Starting client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I0827 16:06:46.119465       1 shared_informer.go:223] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I0827 16:06:46.121553       1 secure_serving.go:178] Serving securely on 127.0.0.1:10259
I0827 16:06:46.121673       1 tlsconfig.go:240] Starting DynamicServingCertificateController
E0827 16:06:46.138406       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0827 16:06:46.142095       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1beta1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0827 16:06:46.143751       1 reflector.go:178] k8s.io/apiserver/pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E0827 16:06:46.144097       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0827 16:06:46.145765       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0827 16:06:46.145991       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0827 16:06:46.166313       1 reflector.go:178] k8s.io/kubernetes/cmd/kube-scheduler/app/server.go:233: Failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0827 16:06:46.168580       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
E0827 16:06:46.168989       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0827 16:06:47.008993       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1beta1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0827 16:06:47.009581       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0827 16:06:47.122275       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
E0827 16:06:47.150027       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0827 16:06:47.213372       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0827 16:06:47.265564       1 reflector.go:178] k8s.io/kubernetes/cmd/kube-scheduler/app/server.go:233: Failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0827 16:06:47.530890       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0827 16:06:47.596793       1 reflector.go:178] k8s.io/client-go/informers/factory.go:135: Failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0827 16:06:47.679255       1 reflector.go:178] k8s.io/apiserver/pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
I0827 16:06:49.820969       1 shared_informer.go:230] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::client-ca-file 
==== END logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
==== START logs for container storage-provisioner of pod kube-system/storage-provisioner ====
I0827 16:07:31.817943       1 leaderelection.go:242] attempting to acquire leader lease  kube-system/k8s.io-minikube-hostpath...
I0827 16:07:31.858857       1 leaderelection.go:252] successfully acquired lease kube-system/k8s.io-minikube-hostpath
I0827 16:07:31.859497       1 controller.go:799] Starting provisioner controller k8s.io/minikube-hostpath_minikube_63d482a4-2974-48e5-a7ce-3cc944950e49!
I0827 16:07:31.866241       1 event.go:281] Event(v1.ObjectReference{Kind:"Endpoints", Namespace:"kube-system", Name:"k8s.io-minikube-hostpath", UID:"485b66cd-91b6-41b4-8011-3d8c2f87f0f6", APIVersion:"v1", ResourceVersion:"405", FieldPath:""}): type: 'Normal' reason: 'LeaderElection' minikube_63d482a4-2974-48e5-a7ce-3cc944950e49 became leader
I0827 16:07:31.960601       1 controller.go:848] Started provisioner controller k8s.io/minikube-hostpath_minikube_63d482a4-2974-48e5-a7ce-3cc944950e49!
==== END logs for container storage-provisioner of pod kube-system/storage-provisioner ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/events",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube.162f2ba85aa86a0b",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2ba85aa86a0b",
                "uid": "0a1dc535-1a34-40d0-bc2f-78a05c334179",
                "resourceVersion": "198",
                "creationTimestamp": "2020-08-27T16:06:49Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:50Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node minikube status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:34Z",
            "lastTimestamp": "2020-08-27T16:06:35Z",
            "count": 6,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2ba85aa887ee",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2ba85aa887ee",
                "uid": "6a3bd01f-02c8-4b07-aa5d-a79863732b7e",
                "resourceVersion": "187",
                "creationTimestamp": "2020-08-27T16:06:49Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:49Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node minikube status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:34Z",
            "lastTimestamp": "2020-08-27T16:06:35Z",
            "count": 6,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2ba85aa896e2",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2ba85aa896e2",
                "uid": "b78f3905-803e-4f2a-8f05-df8871b7bf09",
                "resourceVersion": "199",
                "creationTimestamp": "2020-08-27T16:06:48Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:50Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node minikube status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:34Z",
            "lastTimestamp": "2020-08-27T16:06:35Z",
            "count": 6,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2bad72d8ec0c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2bad72d8ec0c",
                "uid": "97fd9265-9c59-4928-a17d-1ed4c78abf5b",
                "resourceVersion": "337",
                "creationTimestamp": "2020-08-27T16:06:56Z",
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:56Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "a6807cbe-5497-4412-a51a-092b0aa780c0",
                "apiVersion": "v1"
            },
            "reason": "RegisteredNode",
            "message": "Node minikube event: Registered Node minikube in Controller",
            "source": {
                "component": "node-controller"
            },
            "firstTimestamp": "2020-08-27T16:06:56Z",
            "lastTimestamp": "2020-08-27T16:06:56Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2badb0f44ba7",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2badb0f44ba7",
                "uid": "28b09e06-b7b2-493e-902d-b3d2c1a80caa",
                "resourceVersion": "346",
                "creationTimestamp": "2020-08-27T16:06:57Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:57Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "Starting",
            "message": "Starting kubelet.",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:57Z",
            "lastTimestamp": "2020-08-27T16:06:57Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2badc02328b4",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2badc02328b4",
                "uid": "a062871a-f6ab-477b-b77d-b75d270ed5d4",
                "resourceVersion": "348",
                "creationTimestamp": "2020-08-27T16:06:57Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:57Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node minikube status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:57Z",
            "lastTimestamp": "2020-08-27T16:06:57Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2badc02342b6",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2badc02342b6",
                "uid": "dd24e016-ed8c-40eb-b46f-e3b40c3f4a6b",
                "resourceVersion": "349",
                "creationTimestamp": "2020-08-27T16:06:58Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:58Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node minikube status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:57Z",
            "lastTimestamp": "2020-08-27T16:06:57Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2badc023535e",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2badc023535e",
                "uid": "cfb4ab85-e220-41c6-b218-21bf40e0f992",
                "resourceVersion": "350",
                "creationTimestamp": "2020-08-27T16:06:58Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:58Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node minikube status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:57Z",
            "lastTimestamp": "2020-08-27T16:06:57Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2badc99f9f41",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2badc99f9f41",
                "uid": "0d57324d-9c5c-42ea-8c01-b69eee54ed29",
                "resourceVersion": "351",
                "creationTimestamp": "2020-08-27T16:06:58Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:58Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeNotReady",
            "message": "Node minikube status is now: NodeNotReady",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:58Z",
            "lastTimestamp": "2020-08-27T16:06:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2badd26d6f60",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2badd26d6f60",
                "uid": "bc251977-3523-4d94-81a1-6de8b07c19ff",
                "resourceVersion": "354",
                "creationTimestamp": "2020-08-27T16:06:58Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:58Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeAllocatableEnforced",
            "message": "Updated Node Allocatable limit across pods",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:06:58Z",
            "lastTimestamp": "2020-08-27T16:06:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2bae4ff71ff6",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2bae4ff71ff6",
                "uid": "720ed5f7-8851-44f4-b248-81a519e5f39f",
                "resourceVersion": "371",
                "creationTimestamp": "2020-08-27T16:07:00Z",
                "managedFields": [
                    {
                        "manager": "kube-proxy",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:00Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "Starting",
            "message": "Starting kube-proxy.",
            "source": {
                "component": "kube-proxy",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:07:00Z",
            "lastTimestamp": "2020-08-27T16:07:00Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.162f2bb025eb01bb",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.162f2bb025eb01bb",
                "uid": "3b5df83d-6531-44e2-845d-4adbc18541bc",
                "resourceVersion": "378",
                "creationTimestamp": "2020-08-27T16:07:08Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:07:08Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeReady",
            "message": "Node minikube status is now: NodeReady",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-08-27T16:07:08Z",
            "lastTimestamp": "2020-08-27T16:07:08Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/replicationcontrollers",
        "resourceVersion": "617"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/services",
        "resourceVersion": "617"
    },
    "items": [
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/kubernetes",
                "uid": "6fa96e66-e072-4b0d-baf5-b0f794d34408",
                "resourceVersion": "154",
                "creationTimestamp": "2020-08-27T16:06:48Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                },
                "managedFields": [
                    {
                        "manager": "kube-apiserver",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-08-27T16:06:48Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:provider": {}
                                }
                            },
                            "f:spec": {
                                "f:clusterIP": {},
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":443,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 8443
                    }
                ],
                "clusterIP": "10.96.0.1",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/daemonsets",
        "resourceVersion": "617"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/deployments",
        "resourceVersion": "617"
    },
    "items": []
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/replicasets",
        "resourceVersion": "617"
    },
    "items": []
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/pods",
        "resourceVersion": "617"
    },
    "items": []
}



kubectl get nodes
padmin@jjvm006:~/Kube$ kubectl get nodes
NAME       STATUS   ROLES    AGE     VERSION
minikube   Ready    master   5m58s   v1.18.3


padmin@jjvm006:~/Kube$ kubectl get pod
No resources found in default namespace.


minikube ssh
$ cat /etc/os-release 
NAME=Buildroot
VERSION=2019.02.11
ID=buildroot
VERSION_ID=2019.02.11
PRETTY_NAME="Buildroot 2019.02.11"

$ ls /home/
docker

$ exit


padmin@jjvm006:~/Kube$ minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured

padmin@jjvm006:~/Kube$ minikube stop
* Stopping node "minikube"  ...
* 1 nodes stopped.
padmin@jjvm006:~/Kube$ minikube status
minikube
type: Control Plane
host: Stopped
kubelet: Stopped
apiserver: Stopped
kubeconfig: Stopped

padmin@jjvm006:~/Kube$ minikube addons list
|-----------------------------|----------|--------------|
|         ADDON NAME          | PROFILE  |    STATUS    |
|-----------------------------|----------|--------------|
| ambassador                  | minikube | disabled     |
| dashboard                   | minikube | disabled     |
| default-storageclass        | minikube | enabled ✅   |
| efk                         | minikube | disabled     |
| freshpod                    | minikube | disabled     |
| gcp-auth                    | minikube | disabled     |
| gvisor                      | minikube | disabled     |
| helm-tiller                 | minikube | disabled     |
| ingress                     | minikube | disabled     |
| ingress-dns                 | minikube | disabled     |
| istio                       | minikube | disabled     |
| istio-provisioner           | minikube | disabled     |
| kubevirt                    | minikube | disabled     |
| logviewer                   | minikube | disabled     |
| metallb                     | minikube | disabled     |
| metrics-server              | minikube | disabled     |
| nvidia-driver-installer     | minikube | disabled     |
| nvidia-gpu-device-plugin    | minikube | disabled     |
| olm                         | minikube | disabled     |
| pod-security-policy         | minikube | disabled     |
| registry                    | minikube | disabled     |
| registry-aliases            | minikube | disabled     |
| registry-creds              | minikube | disabled     |
| storage-provisioner         | minikube | enabled ✅   |
| storage-provisioner-gluster | minikube | disabled     |
|-----------------------------|----------|--------------|


padmin@jjvm006:~/Kube$ minikube start
padmin@jjvm006:~/Kube$ export DISPLAY=watelg50.watson.ibm.com:28
padmin@jjvm006:~/Kube$ minikube dashboard
* Verifying dashboard health ...
* Launching proxy ...
* Verifying proxy health ...
* Opening http://127.0.0.1:40959/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/ in your default browser...

(firefox:10007): LIBDBUSMENU-GLIB-WARNING **: 16:21:57.608: Unable to get session bus: Failed to execute child process “dbus-launch” (No such file or directory)


padmin@jjvm006:~/Kube$ export DISPLAY=watelg50.watson.ibm.com:28
padmin@jjvm006:~/Kube$ minikube dashboard
* Verifying dashboard health ...
* Launching proxy ...
* Verifying proxy health ...
* Opening http://127.0.0.1:40959/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/ in your default browser...

(firefox:10007): LIBDBUSMENU-GLIB-WARNING **: 16:21:57.608: Unable to get session bus: Failed to execute child process “dbus-launch” (No such file or directory)




^C
padmin@jjvm006:~/Kube$ 
padmin@jjvm006:~/Kube$ minikube dashboard --url
* Verifying dashboard health ...
* Launching proxy ...
* Verifying proxy health ...
http://127.0.0.1:39057/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/


FIREFOX --> above URL


Deploy KubeVirt

padmin@jjvm006:~/Kube$ kubectl create configmap -n kubevirt kubevirt-config --from-literal debug.useEmulation=true
configmap/kubevirt-config created
padmin@jjvm006:~/Kube$ kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/v0.32.0/kubevirt-operator.yaml
Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply
namespace/kubevirt configured
customresourcedefinition.apiextensions.k8s.io/kubevirts.kubevirt.io created
priorityclass.scheduling.k8s.io/kubevirt-cluster-critical created
clusterrole.rbac.authorization.k8s.io/kubevirt.io:operator created
serviceaccount/kubevirt-operator created
role.rbac.authorization.k8s.io/kubevirt-operator created
rolebinding.rbac.authorization.k8s.io/kubevirt-operator-rolebinding created
clusterrole.rbac.authorization.k8s.io/kubevirt-operator created
clusterrolebinding.rbac.authorization.k8s.io/kubevirt-operator created
deployment.apps/virt-operator created
padmin@jjvm006:~/Kube$ kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/v0.32.0/kubevirt-cr.yaml
kubevirt.kubevirt.io/kubevirt created
padmin@jjvm006:~/Kube$ ls
LOG
padmin@jjvm006:~/Kube$ kubectl wait --timeout=180s --for=condition=Available -n kubevirt kv/kubevirt
kubevirt.kubevirt.io/kubevirt condition met
 


Install virtctl

padmin@jjvm006:~/Kube$ curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/v0.32.0/virtctl-v0.32.0-linux-amd64
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   651  100   651    0     0   3852      0 --:--:-- --:--:-- --:--:--  3852
100 39.9M  100 39.9M    0     0  31.5M      0  0:00:01  0:00:01 --:--:-- 35.0M
padmin@jjvm006:~/Kube$ chmod +x virtctl


opadmin@jjvm006:~/Kube$ kubectl krew install virt
Error: unknown command "krew" for "kubectl"
Run 'kubectl --help' for usage.
padmin@jjvm006:~/Kube$ (
>   set -x; cd "$(mktemp -d)" &&
>   curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz" &&
>   tar zxvf krew.tar.gz &&
>   KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" &&
>   "$KREW" install krew
> )
++ mktemp -d
+ cd /tmp/tmp.jgwoGgJxez
+ curl -fsSLO https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz
+ tar zxvf krew.tar.gz
./LICENSE
./krew-darwin_amd64
./krew-linux_amd64
./krew-linux_arm
./krew-windows_amd64.exe
++ uname
++ tr '[:upper:]' '[:lower:]'
+ KREW=./krew-linux_amd64
+ ./krew-linux_amd64 install krew
Adding "default" plugin index from https://github.com/kubernetes-sigs/krew-index.git.
Updated the local copy of plugin index.
Installing plugin: krew
Installed plugin: krew
\
 | Use this plugin:
 |      kubectl krew
 | Documentation:
 |      https://krew.sigs.k8s.io/
 | Caveats:
 | \
 |  | krew is now installed! To start using kubectl plugins, you need to add
 |  | krew's installation directory to your PATH:
 |  | 
 |  |   * macOS/Linux:
 |  |     - Add the following to your ~/.bashrc or ~/.zshrc:
 |  |         export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
 |  |     - Restart your shell.
 |  | 
 |  |   * Windows: Add %USERPROFILE%\.krew\bin to your PATH environment variable
 |  | 
 |  | To list krew commands and to get help, run:
 |  |   $ kubectl krew
 |  | For a full list of available plugins, run:
 |  |   $ kubectl krew search
 |  | 
 |  | You can find documentation at
 |  |   https://krew.sigs.k8s.io/docs/user-guide/quickstart/.
 | /
/
padmin@jjvm006:~/Kube$ export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
padmin@jjvm006:~/Kube$ kubectl krew install virt
Updated the local copy of plugin index.
Installing plugin: virt
Installed plugin: virt
\
 | Use this plugin:
 |      kubectl virt
 | Documentation:
 |      https://kubevirt.io
 | Caveats:
 | \
 |  | virt plugin is a wrapper for virtctl originating from the KubeVirt project. In order to use virtctl you will
 |  | need to have KubeVirt installed on your Kubernetes cluster to use it. See https://kubevirt.io/ for details
 |  | 
 |  | See
 |  | 
 |  |   https://kubevirt.io/user-guide/docs/latest/using-virtual-machines/graphical-and-console-access.html
 |  | 
 |  | for a usage example
 | /
/
WARNING: You installed plugin "virt" from the krew-index plugin repository.
   These plugins are not audited for security by the Krew maintainers.
   Run them at your own risk.




# Creating a virtual machine
$ kubectl apply -f https://raw.githubusercontent.com/kubevirt/demo/master/manifests/vm.yaml

# After deployment you can manage VMs using the usual verbs:
$ kubectl describe vm testvm

# To start a VM you can use, this will create a VM instance (VMI)
$ ./virtctl start testvm

# The interested reader can now optionally inspect the instance
$ kubectl describe vmi testvm

# To shut the VM down again:
$ ./virtctl stop testvm

# To delete
$ kubectl delete vm testvm
# To create your own
$ kubectl apply -f $YOUR_VM_SPEC
Accessing VMs (serial console & VNC)
if virtctl is installed via krew, please use kubectl virt ... instead of ./virtctl ...

# Connect to the serial console
$ ./virtctl console testvm

# Connect to the graphical display
# This requires remote-viewer from the virt-viewer package and a graphical desktop from where you run virtctl
$ ./virtctl vnc testvm


Last login: Thu Aug 27 17:57:48 2020 from 9.2.221.174
padmin@jjvm006:~$ cd Kube/
padmin@jjvm006:~/Kube$ minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured

padmin@jjvm006:~/Kube$ kubectl describe vmi testvm
Name:         testvm
Namespace:    default
Labels:       kubevirt.io/domain=testvm
              kubevirt.io/nodeName=minikube
              kubevirt.io/size=small
Annotations:  kubevirt.io/latest-observed-api-version: v1alpha3
              kubevirt.io/storage-observed-api-version: v1alpha3
API Version:  kubevirt.io/v1alpha3
Kind:         VirtualMachineInstance
Metadata:
  Creation Timestamp:  2020-08-27T17:37:05Z
  Finalizers:
    foregroundDeleteVirtualMachine
  Generation:  8
  Managed Fields:
    API Version:  kubevirt.io/v1alpha3
    Fields Type:  FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .:
          f:kubevirt.io/latest-observed-api-version:
          f:kubevirt.io/storage-observed-api-version:
        f:labels:
          .:
          f:kubevirt.io/domain:
          f:kubevirt.io/nodeName:
          f:kubevirt.io/size:
        f:ownerReferences:
      f:spec:
        .:
        f:domain:
          .:
          f:devices:
            .:
            f:disks:
            f:interfaces:
          f:firmware:
            .:
            f:uuid:
          f:machine:
            .:
            f:type:
          f:resources:
            .:
            f:requests:
              .:
              f:memory:
        f:networks:
        f:volumes:
      f:status:
        .:
        f:activePods:
          .:
          f:076cb009-1438-43c8-b51f-f39fa5658070:
        f:conditions:
        f:guestOSInfo:
        f:nodeName:
        f:qosClass:
    Manager:      virt-controller
    Operation:    Update
    Time:         2020-08-27T17:37:35Z
    API Version:  kubevirt.io/v1alpha3
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        f:interfaces:
        f:migrationMethod:
        f:phase:
    Manager:    virt-handler
    Operation:  Update
    Time:       2020-08-27T17:37:35Z
  Owner References:
    API Version:           kubevirt.io/v1alpha3
    Block Owner Deletion:  true
    Controller:            true
    Kind:                  VirtualMachine
    Name:                  testvm
    UID:                   9f1b29db-2d0f-4ab7-88b7-eabf322aa8c5
  Resource Version:        2522
  Self Link:               /apis/kubevirt.io/v1alpha3/namespaces/default/virtualmachineinstances/testvm
  UID:                     6e819e04-f20c-49b5-b3b2-db07f45f89fc
Spec:
  Domain:
    Devices:
      Disks:
        Disk:
          Bus:  virtio
        Name:   rootfs
        Disk:
          Bus:  virtio
        Name:   cloudinit
      Interfaces:
        Masquerade:
        Name:  default
    Features:
      Acpi:
        Enabled:  true
    Firmware:
      Uuid:  5a9fc181-957e-5c32-9e5a-2de5e9673531
    Machine:
      Type:  q35
    Resources:
      Requests:
        Cpu:     100m
        Memory:  64M
  Networks:
    Name:  default
    Pod:
  Volumes:
    Container Disk:
      Image:              kubevirt/cirros-registry-disk-demo
      Image Pull Policy:  Always
    Name:                 rootfs
    Cloud Init No Cloud:
      userDataBase64:  SGkuXG4=
    Name:              cloudinit
Status:
  Active Pods:
    076cb009-1438-43c8-b51f-f39fa5658070:  minikube
  Conditions:
    Last Probe Time:       <nil>
    Last Transition Time:  <nil>
    Status:                True
    Type:                  LiveMigratable
    Last Probe Time:       <nil>
    Last Transition Time:  2020-08-27T17:37:32Z
    Status:                True
    Type:                  Ready
  Guest OS Info:
  Interfaces:
    Ip Address:  172.17.0.10
    Ip Addresses:
      172.17.0.10
    Mac:             02:00:00:71:cb:21
    Name:            default
  Migration Method:  BlockMigration
  Node Name:         minikube
  Phase:             Running
  Qos Class:         Burstable
Events:
  Type    Reason            Age                  From                       Message
  ----    ------            ----                 ----                       -------
  Normal  SuccessfulCreate  30m                  virtualmachine-controller  Created virtual machine pod virt-launcher-testvm-824lk
  Normal  Started           30m                  virt-handler, minikube     VirtualMachineInstance started.
  Normal  Created           3m59s (x9 over 30m)  virt-handler, minikube     VirtualMachineInstance defined.


padmin@jjvm006:~/Kube$ virtctl stop testvm
VM testvm was scheduled to stop
padmin@jjvm006:~/Kube$ kubectl describe vmi testvm
Error from server (NotFound): virtualmachineinstances.kubevirt.io "testvm" not found

